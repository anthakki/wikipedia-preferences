#!/usr/bin/env python3

import collections
import configparser
import json
import os.path
import time
import urllib.parse
import urllib.request

class MediaWikiSiteMatrix:
	URL = 'https://www.mediawiki.org/w/api.php?action=sitematrix&format=json'

	def __init__(self):
		self.__cache_fn = 'sitematrix.json'
		self.__fetch()

	def __fetch(self):
		if not os.path.exists(self.__cache_fn):
			urllib.request.urlretrieve(self.URL, self.__cache_fn)

	def __iter__(self):
		def json_walk(node):
			yield node

			if isinstance(node, list):
				for value in node:
					yield from json_walk(value)

			if isinstance(node, dict):
				for key in node:
					yield from json_walk(node[key])

		with open(self.__cache_fn, 'r') as stream:
			for node in json_walk(json.load(stream)):
				try:
					dbname, url = node['dbname'], node['url']
					host = urllib.parse.urlparse(url).hostname

					yield {'host': host, 'dbname': dbname, 'url': url}
				except KeyError:
					pass	
				except TypeError:
					pass

class Preferences(collections.OrderedDict):
	SCHEMA = {
		'appearance': {
			'key': 'vector-feature-appearance-pinned-clientpref',
			'values': {
				'hide': '0',
				'sidebar': '1'
			}		
		},
		'text': {
			'key': 'vector-feature-custom-font-size-clientpref',
			'values': {
				'small': '0',
				'standard': '1',
				'large': '2'
			}
		},
		'width': {
			'key': 'vector-feature-limited-width-clientpref',
			'values': {
				'wide': '0',
				'standard': '1'
			}
		},
		'color': {
			'key': 'skin-theme-clientpref',
			'values': {
				'automatic': 'os',
				'light': 'day',
				'dark': 'night'
			}
		},
	}

	def __init__(self, stream):
		super().__init__()

		parser = configparser.ConfigParser(comment_prefixes = '#', inline_comment_prefixes = '#')
		parser.read_file(stream)

		for name in parser['preferences']:
			key = self.SCHEMA[name]['key']
			val = self.SCHEMA[name]['values'][parser['preferences'][name]]
			self[key] = val

def generate_rule(host, dbname, prefs):
	cookie_key = f'{dbname}mwclientpreferences'
	cookie_val = urllib.parse.quote_plus(','.join(f'{key}-{prefs[key]}' for key in prefs))

	return f"{host}##+js(trusted-set-cookie, {cookie_key}, '{cookie_val}', , , reload, 1, dontOverwrite, 1)"

if __name__ == '__main__':
	import getopt
	import sys

	def usage():
		sys.stderr.write(f'Usage: {sys.argv[0]} [-o output.txt] preferences.conf' + '\n')
		sys.exit(1)

	out_fn = None

	try:
		opts, (prefs_fn, ) = getopt.getopt(sys.argv[1:], 'o:')
	except getopt.GetoptError:
		usage()
	except ValueError:
		usage()

	for key, val in opts:
		if key == '-o':
			out_fn = val

	with open(prefs_fn, 'r') as stream:
		prefs = Preferences(stream)

	if out_fn:
		sys.stdout = open(out_fn, 'w')

	print(f'!')
	print(f'! this file was automatically generated by {os.path.basename(__file__)} on {time.asctime()}')
	print(f'!')

	for item in MediaWikiSiteMatrix():
		print(generate_rule(item['host'], item['dbname'], prefs))
